}
else {
data1
}
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
#dir1<-getwd()
file1 <- paste(directory,"/",sprintf("%03d", id),".csv",sep="")
data1 <- read.csv(file1, header = TRUE)
if (summarize)  {
print(data1[1:6,])
summary(data1)
}
else {
data1
}
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
?stop
?in
?%in%
help(%in%)
help(in)
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if is.null(cause) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes<-c("asphyxiation", "blunt force", "other", "shooting", "stabbing", 'unknown")
grep(cause, allowed_causes, fixed=TRUE)
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
cause()
q
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if is.null(cause) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
print x
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if is.null(cause) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
print x
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if is.null(cause) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
print x
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
count <- function(cause = NULL) {
cause <- "other"
## Check that "cause" is non-NULL; else throw error
if is.null(cause) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
print x
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
count <- function(cause = NULL) {
cause <- "other"
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
print x
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
count <- function(cause = NULL) {
cause <- "other"
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
print (x)
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
count("other")
count <- function(cause = NULL) {
cause <- "mother"
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
print (x)
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
count("other")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
if (x == 0) stop ("Cause is not allowed")
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
count("d")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
if (is.null(x)) stop ("Cause is not allowed")
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
count("d")
count("other")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
x <- grep(cause, allowed_causes, fixed=TRUE)
if (x == 0) stop ("Cause is not allowed")
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
count("other")
count("othe")
count("othe")
count()
help.search("%in%")
?within
?in
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
allowed_causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
if(is.na(match(cause,allowed_causes))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
## Extract causes of death
## Return integer containing count of homicides for that cause
homicides <- readLines("homicides.txt")
}
count("other")
count("othe")
homicides[1]
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
r <- regexpr("<dd>[C|c]ause: ", homicides)
x <- length(regmatches(homicides, r))
## Return integer containing count of homicides for that cause
x<-as.integer(x)
return(x)
}
count("other")
count("blunt force")
r
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
r <- regexpr("<dd>[C|c]ause: ", homicides)
print(r[1:5])
x <- length(regmatches(homicides, r))
## Return integer containing count of homicides for that cause
x<-as.integer(x)
return(x)
}
count("other")
count("shooting")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
r <- regexpr("<dd>[C|c]ause: ", homicides)
x <- regmatches(homicides, r)
print(x[1:5])
## Return integer containing count of homicides for that cause
x<-as.integer(x)
return(x)
}
count("other")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
if (cause == "asphyxiation") r <- regexpr("<dd>[C|c]ause: [A|a]sphyxiation", homicides)
else if (cause == "blunt force") r <- regexpr("<dd>[C|c]ause: [B|b]lunt force", homicides)
else if (cause == "other") r <- regexpr("<dd>[C|c]ause: [O|o]ther", homicides)
else if (cause == "shooting") r <- regexpr("<dd>[C|c]ause: [S|s]hooting", homicides)
else if (cause == "stabbing") r <- regexpr("<dd>[C|c]ause: [S|s]tabbing", homicides)
else if (cause == "unknown") r <- regexpr("<dd>[C|c]ause: [U|u]nknown", homicides)
## Return integer containing count of homicides for that cause
x<-as.integer(length(grep(r, homicides)))
return(x)
}
count("other")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
if (cause == "asphyxiation") r <- regexpr("<dd>[C|c]ause: [A|a]sphyxiation", homicides)
else if (cause == "blunt force") r <- regexpr("<dd>[C|c]ause: [B|b]lunt force", homicides)
else if (cause == "other") r <- regexpr("<dd>[C|c]ause: [O|o]ther", homicides)
else if (cause == "shooting") r <- regexpr("<dd>[C|c]ause: [S|s]hooting", homicides)
else if (cause == "stabbing") r <- regexpr("<dd>[C|c]ause: [S|s]tabbing", homicides)
else if (cause == "unknown") r <- regexpr("<dd>[C|c]ause: [U|u]nknown", homicides)
## Return integer containing count of homicides for that cause
x<-sapply(as.integer(length(grep(r, homicides))))
return(x)
}
count("other")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
if (cause == "asphyxiation") r <- regexpr("<dd>[C|c]ause: [A|a]sphyxiation", homicides)
else if (cause == "blunt force") r <- regexpr("<dd>[C|c]ause: [B|b]lunt force", homicides)
else if (cause == "other") r <- regexpr("<dd>[C|c]ause: [O|o]ther", homicides)
else if (cause == "shooting") r <- regexpr("<dd>[C|c]ause: [S|s]hooting", homicides)
else if (cause == "stabbing") r <- regexpr("<dd>[C|c]ause: [S|s]tabbing", homicides)
else if (cause == "unknown") r <- regexpr("<dd>[C|c]ause: [U|u]nknown", homicides)
print(r)
## Return integer containing count of homicides for that cause
x<-as.integer(length(grep(r, homicides)))
return(x)
}
count("other")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
if (cause == "asphyxiation") r <- regexpr("<dd>[C|c]ause: [A|a]sphyxiation", homicides)
else if (cause == "blunt force") r <- regexpr("<dd>[C|c]ause: [B|b]lunt force", homicides)
else if (cause == "other") r <- regexpr("<dd>[C|c]ause: [O|o]ther", homicides)
else if (cause == "shooting") r <- regexpr("<dd>[C|c]ause: [S|s]hooting", homicides)
else if (cause == "stabbing") r <- regexpr("<dd>[C|c]ause: [S|s]tabbing", homicides)
else if (cause == "unknown") r <- regexpr("<dd>[C|c]ause: [U|u]nknown", homicides)
print(r)
## Return integer containing count of homicides for that cause
##x<-as.integer(length(grep(r, homicides)))
##return(x)
}
count("other")
homicides[585]
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
if (cause == "asphyxiation") r <- regexpr("<dd>[C|c]ause: [A|a]sphyxiation", homicides)
else if (cause == "blunt force") r <- regexpr("<dd>[C|c]ause: [B|b]lunt force", homicides)
else if (cause == "other") r <- regexpr("<dd>[C|c]ause: [O|o]ther", homicides)
else if (cause == "shooting") r <- regexpr("<dd>[C|c]ause: [S|s]hooting", homicides)
else if (cause == "stabbing") r <- regexpr("<dd>[C|c]ause: [S|s]tabbing", homicides)
else if (cause == "unknown") r <- regexpr("<dd>[C|c]ause: [U|u]nknown", homicides)
x<-as.integer(length(r[r>0]))
## Return integer containing count of homicides for that cause
##x<-as.integer(length(grep(r, homicides)))
return(x)
}
count("other")
count("stabbing")
count("shooting")
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("Cause must be non-NULL")
## Check that specific "cause" is allowed; else throw error
if(is.na(match(cause,c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")))) stop ("Cause is not allowed")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
if (cause == "asphyxiation") r <- regexpr("<dd>[C|c]ause: [A|a]sphyxiation", homicides)
else if (cause == "blunt force") r <- regexpr("<dd>[C|c]ause: [B|b]lunt force", homicides)
else if (cause == "other") r <- regexpr("<dd>[C|c]ause: [O|o]ther", homicides)
else if (cause == "shooting") r <- regexpr("<dd>[C|c]ause: [S|s]hooting", homicides)
else if (cause == "stabbing") r <- regexpr("<dd>[C|c]ause: [S|s]tabbing", homicides)
else if (cause == "unknown") r <- regexpr("<dd>[C|c]ause: [U|u]nknown", homicides)
## Return integer containing count of homicides for that cause
x<-as.integer(length(r[r>0]))
return(x)
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript4.R")
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript4.R")
submit()
submit()
submit()
agecount <- function(age = NULL) {
## Check that "age" is non-NULL; else throw error
if (is.null(age)) stop("Age must be non-NULL")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract ages of victims; ignore records where no age is given
r<-regexpr(" ([0-9]+){1,3} [Y|y]ears old", homicides)
x<-regmatches(homicides,r)
y<-gsub("[Y|y]ears old","", x)
y<-gsub(" ","",y)
y<-as.integer(y)
## Return integer containing count of homicides for that age
answer<-as.integer(length(y[y==age]))
}
agecount(2)
agecount(25)
agecount <- function(age = NULL) {
## Check that "age" is non-NULL; else throw error
if (is.null(age)) stop("Age must be non-NULL")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract ages of victims; ignore records where no age is given
r<-regexpr(" ([0-9]+){1,3} [Y|y]ears old", homicides)
x<-regmatches(homicides,r)
y<-gsub("[Y|y]ears old","", x)
print(y)
y<-gsub(" ","",y)
y<-as.integer(y)
## Return integer containing count of homicides for that age
answer<-as.integer(length(y[y==age]))
}
agecount(2)
agecount <- function(age = NULL) {
## Check that "age" is non-NULL; else throw error
if (is.null(age)) stop("Age must be non-NULL")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract ages of victims; ignore records where no age is given
r<-regexpr(" ([0-9]+){1,3} [Y|y]ears old", homicides)
x<-regmatches(homicides,r)
y<-gsub("[Y|y]ears old","", x)
y<-gsub(" ","",y)
print(y)
y<-as.integer(y)
## Return integer containing count of homicides for that age
answer<-as.integer(length(y[y==age]))
}
agecount(2)
agecount <- function(age = NULL) {
## Check that "age" is non-NULL; else throw error
if (is.null(age)) stop("Age must be non-NULL")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract ages of victims; ignore records where no age is given
r<-regexpr(" ([0-9]+){1,3} [Y|y]ears old", homicides)
x<-regmatches(homicides,r)
y<-gsub("[Y|y]ears old","", x)
y<-gsub(" ","",y)
y<-as.integer(y)
print(y)
## Return integer containing count of homicides for that age
answer<-as.integer(length(y[y==age]))
}
agecount(2)
?cnt
?count
??count
agecount <- function(age = NULL) {
## Check that "age" is non-NULL; else throw error
if (is.null(age)) stop("Age must be non-NULL")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract ages of victims; ignore records where no age is given
r<-regexpr(" ([0-9]+){1,3} [Y|y]ears old", homicides)
x<-regmatches(homicides,r)
y<-gsub("[Y|y]ears old","", x)
y<-gsub(" ","",y)
y<-as.integer(y)
## Return integer containing count of homicides for that age
agecount<-length((y[y == age]))
return(agecount)
}
agecount(2)
agecount(25)
agecount(67)
agecount(167)
agecount(3)
agecount <- function(age = NULL) {
## Check that "age" is non-NULL; else throw error
if (is.null(age)) stop("Age must be non-NULL")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract ages of victims; ignore records where no age is given
r<-regexpr(" ([0-9]+){1,3} [Y|y]ears old", homicides)
x<-regmatches(homicides,r)
y<-gsub("[Y|y]ears old","", x)
y<-gsub(" ","",y)
y<-as.integer(y)
## Return integer containing count of homicides for that age
agecount<-length((y[y == age]))
return(agecount)
}
submit()
submit()
install.packages("kernlab")
library(kernlab)
data(spam)
dim(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
dim(trainSpam)
q()
setwd("C:\\Users\\PuchkovVG\\Documents\\CourseraDA\\Project1")
library('ProjectTemplate')
load.project()
setwd("C:\\Users\\PuchkovVG\\Documents\\CourseraDA\\Project1")
library('ProjectTemplate')
load.project()
setwd("C:\\Users\\PuchkovVG\\Documents\\CourseraDA\\Project1")
library('ProjectTemplate')
load.project()
install.packages("log4r")
setwd("C:\\Users\\PuchkovVG\\Documents\\CourseraDA\\Project1")
library('ProjectTemplate')
load.project()
stub.tests()
?expect_that
?helper.function
??helper.function
FICO.f<-factor(loansData$FICO.range)
print(FICO.f)
rm(FICO.f)
head(loansData$FICO.range)
head(loansData$FICO.Range)
FICO.f<-factor(loansData$FICO.Range)
print(FICO.f)
rank(FICO.f)
plot(FICO.f)
logger
boxplot(loansData$Amount.Requested)
boxplot(loansData)
boxplot(loansData$Interest.rate)
